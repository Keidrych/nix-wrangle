#!bash -eu
# vim: set syntax=markdown:
gup --always
# set -x
function include {
	echo >&2 "Including $1"
	gup -u "$1"
	echo '```bash'
	cat "$1"
	echo '```'
}

cat > "$1" <<EOF
$(true > /dev/null)
# nix-wrangle

## Purpose:

Nix-wrangle aims to be a swiss-army knife for working with nix packages (or dependencies).
It works best with dependencies that include their own nix derivations, although using it for fetching plain archives works too.

## Basic functionality:

nix-wrangle maintains a set of sources, which are typically dependencies. The following example shows the basic setup:

$(include example/01-setup)

Note that the dependency is built (by using \`pkgs.callPackage\` on the nix path within the source), which gives you the actual derivation, not simply the source code. This is one important difference compared to [niv](https://github.com/nmattia/niv).

Sources are typically used for project dependencies, but there are three special sources:

 - 'self': (optional) used to override the toplevel derivation's 'src' attribute when building 'default.nix'
 - 'pkgs': (optional) used to pin the exact version of 'nixpkgs'
 - 'nix-wrangle': (added automatically) used for bootstrapping in 'default.nix'

# Features:

Nix-wrangle is purpose built to solve a range of specific use cases which come up when developing with nix:

## Update from specification

e.g. when using a git-based dependency, you can specify a branch instead of a specific commit. When you \`update\`, that branch will be re-resolved:

$(include example/02-update)

You can also make use of templating, e.g. for a URL dependency you can use the URL \`'http://example.com/libfoo/libfoo-<version>.tgz'\`. When updating, you can pass \`--version NEW_VERSION\` to update it.

## 'self' injection: let nix-wrangle inject your 'src' attribute from any of the available fetcher types

('git-local' is particularly useful)

## Local overrides

When working on both a library and an application that uses it, it's common to want to try out working changes before publishing them. This is easy with local sources:

$(include example/03-local-override)

This uses the local version of a dependency for building, but kept separate from the "public" version of your dependency specificaion.

## Splicing into a self-contained derivation

nix-wrangle was built so that your base derivation (\`nix/default.nix\`) can be idiomatic - it doesn't need to reference \`nix-wrangle\` at all, and its dependencies are injected as arguments, just like regular derivations in \`nixpkgs\`. The one way in which they aren't idiomatic is the \`src\` attribute. I typically set this to \`null\` to make it clear that it's externally managed.

So there's also the \`splice\` command. This injects the current value of a fetched source (defaulting to \`self\`) into a \`.nix\` expression to create a self-contained derivation. This is perfect for promoting your in-tree derivation (with source provided by nix-wrangle) into a derivation suitable for inclusion in \`nixpkgs\`, where it includes its own \`src\` and all dependencies are provided by the caller.

$(include example/04-splice)

# Source types

 - \`url\`: any archive URL. May contain \`<version>\` which is resolved on \`update\`.
 - \`git\`: takes a \`url\` and \`rev\` (which can be a branch, tag or commit). \`rev\` is resolved to a concrete commit on initial add, and on \`update\`.
 - \`github\`: takes an \`owner\`, \`repo\` and \`rev\` (as for \`git\`)
 - \`git-local\`: takes a path (can be relative) and a \`rev\` (can be a branch, tag, commit or \`HEAD\`). \`rev\` is resolved _at evaluation time_, and must be built with \`--option build-use-chroot false\`
 - \`path\`: path (can be relative) and \`rev\`

----

### 'build-use-chroot' caveat:

The 'git-local' source type is "morally pure" - it uses a git commit SHA in the derivation, so (barring git commit collisions), it will be cached / rebuilt just like any other nix derivation. But it's implemented with some impurity -- the source derivation runs 'git-export' in your workspace.

Unfortunately this requires that you pass '--option build-use-chroot false' when building these kinds of sources.

(TODO how does this work for multi-user setup? It probably doesn't.)

In order to not disable the chroot for an entire build, you can run 'nix-wrangle prebuild' to specifically prebuild all such sources with chroot disabled. Then the main build will work in a chroot, using these prebuilt sources.

(TODO this probably doesn't work if you have pinned nixpkgs (different .drv))

# Hacking

There are two options for development:

From within 'nix-shell', use 'cabal v1-build'

Alternatively, from within 'nix-shell -p haskellPackages.cabal-install' you can use 'cabal new-build'. This bypasses the nix infrastructure entirely and fetches its own copy of dependencies, but may be convenient when adjusting packages or pinning dependencies to specific versions.

# Similar tools

### niv:

nix-wrangle was heavily inspired by [niv](https://github.com/nmattia/niv) (the command line tool was even based off the niv source code).
The main differences are:

 - nix-wrangle dependencies are derivations, not just source code.
 - nix-wrangle attempts to let you write idiomatic nix without explicitly referencing any files or functions provided by nix-wrangle.
 - nix-wrangle has a number of extra features not provided by niv: \`splice\`, \`self\` injection and local overlays.

### nix-flakes:

nix-wrangle (like niv) is similar in spirit to [nix flakes](https://gist.github.com/edolstra/40da6e3a4d4ee8fd019395365e0772e7), but there's no actual implementation of flakes yet. My hope is that any standard solution would be able to support nix-wrangle style workflows.

EOF
